specification {
  element actor{
    style{
    shape person
    color green
    }
  }
  element system
  element component
  element subcomponent
  element external_system{
    style{
    color red
    }
  }
  element external_system_component{
    style{
    color amber
    }
  }
}

model {
  technician = actor "Technician" {
    description "User who configures the SkyLink system"
  }
  
  user = actor "End User" {
    description "Person or device sending/receiving data through the SkyLink router"
  }
  
  // Main System
  skylink = system "SkyLink Router System" {
    description "Intelligent router for remote connectivity"
    
    // Core components 
    webUI = component "Web UI" {
      description "Configuration and monitoring interface"
    }

    gpsService = component "GPS Service" {
      description "Provides GPS information for location-based routing decisions"
    }
    
    mqttBroker = component "MQTT Broker" {
      description "Central message broker for internal system communication"
    }

    routerDaemon = component "Router Daemon" {
      description "Central C++ daemon managing overall connectivity and making routing decisions"
      
      // LCR Engine inside Router Daemon
      lcrEngine = subcomponent "LCR Engine" {
        description "Least Cost Routing engine selecting optimal connection path between satellite and cellular"
      }
    }
  }
  
  // External Systems
  gateways = external_system "Gateways" {
    description "Network Gateways"
  satellite = external_system_component "Satellite Network" {
    description "Satellite communication network for data transmission"
  }
  
  cellular = external_system_component "Cellular Network" {
    description "Cellular/mobile network for data transmission"
  }}
  

  skytroo = external_system "Skytrac TrooTrac" {
      description "Manage fleets using live location"
  }

  // External relationships
  technician -> webUI "uses to configure and monitor"
  // mqttBroker -> gateways "Send REST POST(NEED TO CHANGE SKYTROOO)"
  skytroo -> mqttBroker "subscribes to location updates"
  gateways -> skytroo "publish "
  
  // Routing data through satellite or cellular
  routerDaemon -> satellite "routes via when optimal (based on LCR decision)"
  routerDaemon -> cellular "routes via when optimal (based on LCR decision)"
  
  // Return traffic flow
  satellite -> routerDaemon "forwards return traffic to"
  cellular -> routerDaemon "forwards return traffic to"

  satellite -> user "forwards traffic"
  cellular -> user "forwards traffic"

  
  
  // Internal MQTT communication with subscription pattern
  webUI -> mqttBroker "publishes configuration changes to"
  routerDaemon -> mqttBroker "subscribes to configuration topics on"
  
  gpsService -> mqttBroker "publishes location updates to"
  routerDaemon -> mqttBroker "subscribes to location data on"
  
  routerDaemon -> mqttBroker "publishes connection metrics and routing decisions to"
  webUI -> mqttBroker "subscribes to status updates and traffic data on"
}

views {
  view index of skylink {
    title "SkyLink Router - System Landscape"
    include *
  }
  
  view routerDaemon of routerDaemon {
    title "Router Daemon with LCR Engine"
    include *
  }
  
  view internalCommunication of mqttBroker {
    title "Internal MQTT Communication"
    include *
  }

  view {
    title "Location Updates for Skytrac TrooTrax"
    include gpsService,mqttBroker,skytroo
  }
}
