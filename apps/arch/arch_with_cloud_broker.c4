specification {
  element actor{
    style{
    shape person
    color green
    }
  }
  element system
  element component
  element subcomponent
  element external_system{
    style{
    color red
    }
  }
  element external_system_component{
    style{
    color amber
    }
  }
}

model {
  technician = actor "Technician" {
    description "User who configures the SkyLink system"
  }
  remoteTechnician = actor "Remote Technician" {
    description "User who configures/observes the SkyLink system remotely"
  }
  
  user = actor "End User" {
    description "Person or device sending/receiving data through the SkyLink router"
  }
  
  // Main System
  skylink = system "SkyLink Router System" {
    description "Intelligent router for remote connectivity"
    
    // Core components 
    webUI = component "Web UI" {
      description "Configuration and monitoring interface"
    }

    gpsService = component "GPS Service" {
      description "Provides GPS information for location-based routing decisions"
    }
    
    mqttBroker = component "MQTT Broker" {
      description "Central message broker for internal system communication"
    }
    
    mqttBridge = component "MQTT Bridge" {
      description "Bridges internal MQTT traffic to external networks and vice-versa"
    }

    routerDaemon = component "Router Daemon" {
      description "Central C++ daemon managing overall connectivity and making routing decisions"
      
      // LCR Engine inside Router Daemon
      lcrEngine = subcomponent "LCR Engine" {
        description "Least Cost Routing engine selecting optimal connection path between satellite and cellular"
      }
    }
  }
  
  // External Systems
  gateways = external_system "Gateways" {
    description "Network Gateways"
    
    satellite = external_system_component "Satellite Network" {
      description "Satellite communication network for data transmission"
    }
    
    cellular = external_system_component "Cellular Network" {
      description "Cellular/mobile network for data transmission"
    }
  }
  
  cloudServices = external_system "Cloud Services" {
    description "Remote command and control services"
    
    cloudBroker = external_system_component "Cloud MQTT Broker" {
      description "External MQTT broker for cloud-based communication"
    }
    
    commandService = external_system_component "Command Service" {
      description "Service for generating remote commands"
    }
  }

  skytroo = external_system "Skytrac TrooTrac" {
    description "Manage fleets using live location"
  }

  // External relationships
  technician -> webUI "uses to configure and monitor"
  
  // MQTT communication flows
  mqttBroker -> mqttBridge "bi-directional message flow"
  mqttBridge -> mqttBroker "bi-directional message flow"
  
  // MQTT Bridge to gateways
  mqttBridge -> gateways "sends outbound messages through"
  
  // Router daemon connectivity
  routerDaemon -> gateways "routes traffic through"
  
  // Gateway to cloud broker
  gateways -> cloudBroker "forwards MQTT messages to"
  
  // Cloud broker connections
  cloudBroker -> skytroo "forwards location and telemetry to"
  commandService -> cloudBroker "publishes commands to"
  
  // Return path for commands
  cloudBroker -> gateways "sends commands through"
  gateways -> routerDaemon "forwards incoming traffic to" 
  cloudBroker -> gateways "routes inbound commands to"
  gateways -> mqttBridge "routes inbound commands to"

  remoteTechnician -> cloudBroker "Sends commands through"
  
  
  // Internal MQTT communication with subscription pattern
  webUI -> mqttBroker "publishes configuration changes to"
  routerDaemon -> mqttBroker "subscribes to configuration topics on"
  
  gpsService -> mqttBroker "publishes location updates to"
  routerDaemon -> mqttBroker "subscribes to location data on"
  mqttBridge -> mqttBroker "subscribes to outbound data topics on"
  
  routerDaemon -> mqttBroker "publishes connection metrics and routing decisions to"
  webUI -> mqttBroker "subscribes to status updates and traffic data on"
  
  // Connection manager for network interface handling
  lcrEngine -> gateways "oubound network packets"
}

views {
  view index of skylink {
    title "SkyLink Router - System Landscape"
    include * , cloudBroker, skytroo, remoteTechnician
  }
  
  view routerDaemon of routerDaemon {
    title "Router Daemon with LCR Engine"
    include *
  }
  
  view internalCommunication of mqttBroker {
    title "Internal MQTT Communication"
    include *
  }

  view mqttBridgeFlow {
    title "MQTT Bridge Data Flow"
    include mqttBroker, mqttBridge, routerDaemon, gateways, cloudBroker
  }
  
  view locationUpdates {
    title "Location Updates for Skytrac TrooTrac"
    include gpsService, mqttBroker, mqttBridge, gateways, cloudBroker, skytroo
  }
  
  view remoteCommands {
    title "Remote Command Flow"
    include commandService, cloudBroker, gateways, mqttBridge, mqttBroker
  }
}
